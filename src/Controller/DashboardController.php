<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\Event\Event;
use Cake\ORM\TableRegistry;
use Cake\Core\Configure;
use Cake\Datasource\ConnectionManager;

class DashboardController extends AppController
{

    public $components = ['Common', 'Permissions'];

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Calender');
        $this->loadModel('Employees');
        $this->loadModel('Departments');
        $this->loadModel('Attendances');
        $this->loadModel('EmployeesMonthLeaves');

    }

    public function index()
    {
        if(isset($this->emp)){
            $employeeId = $this->emp->id;
            $weekDays = $this->emp->weekdays;
            $department = $this->emp->departments[0];
            $departments = $this->Departments->find()->where(['id' => $department->id])->contain(['Weekdays'])->first();
            $opening_balance = $this->emp->opening_balance;
            if(empty($weekDays)) {
                $weekDays = $departments->weekdays;
            }
            $year =  (int)date('Y');
            $month = (int)date('m');
            if($month == 1) {
                $month = 12;
                $year = $year - 1; // previous year
            } else {
                $month = $month - 1;
            }
            $yearMonth = (int) $year.$month;
            $employeeMonthLeaves = $this->EmployeesMonthLeaves->find()->where(['employee_id' => $employeeId, 'year' => $year, 'month' => $month])->first();
            if(!empty($employeeMonthLeaves)) {
                $remainingBalance =
                    $employeeMonthLeaves->opening_balence + $employeeMonthLeaves->extra_work_days + $employeeMonthLeaves->earn_leaves + $employeeMonthLeaves->adjusted_leaves - $employeeMonthLeaves->leave_taken - $employeeMonthLeaves->leave_for_late - $employeeMonthLeaves->total_absent;

            }

         }

        $this->set(compact('weekDays', 'employeeId','remainingBalance', 'employeeMonthLeaves', 'opening_balance' , 'month'));
        $this->viewBuilder()->template('index');
    }
    public  function calenderEvents()
    {
        $this->autoRender = false;
        $employeeId = $this->request->query('employeeId');
        $startDate = $this->request->query('start');
        $endDate = $this->request->query('end');
        return $this->Calender->getCalender($employeeId, $startDate, $endDate);
    }
    public function switchView() {
        $switchType = $this->request->data['switch_view'];
        if($switchType == 'Employee') {
            $this->resetUserRole(5);
            $this->set('switchType', $switchType);
            $this->viewBuilder()->layout('default');
            $this->request->session()->write('switchType', $switchType);// this used in app controller and site_menu
            return $this->redirect(['controller' => 'Dashboard', 'action' => 'index']);
        }
        $userRoleId = $this->request->session()->read('HR');
        $this->resetUserRole($userRoleId);
        $usersPermissions = $this->Permissions->getLoggedUserRolePermissions();
        $foundFirstController = false;
        $adminController = null;
        $adminAction = null;
        foreach ($usersPermissions[key($usersPermissions)]['Admin'] as $controller => $permissionIds) {
           foreach ($permissionIds as $permissionId => $action) {
              if($action['status'] == 'active' && $action['action'] == 'index') {
                  $foundFirstController = true;
                  $adminController = $controller;
                  $adminAction = $action['action'];
              }
           }
           if($foundFirstController) {
               break;
           }
        }
        $this->request->session()->write('switchType', $switchType);
        if(isset($adminController)) {
            $this->viewBuilder()->layout('admin');
            $this->request->params['prefix'] = 'admin';
            return $this->redirect(['controller' => $adminController, 'action' => $adminAction]);
        } else { // if user don't have access to admin then redirect to dashboard
            $this->viewBuilder()->layout('default');
            $this->request->session()->write('switchType', 'employee');// this used in app controller and site_menu
            return $this->redirect(['controller' => 'Dashboard', 'action' => 'index']);

        }


    }

    private function resetUserRole($roleId) {
        $user['User'] = $this->request->session()->read('Auth.User');
        $newUser = $user;
        $newUser['User']['role_id'] = $roleId;
        $this->request->session()->write('Auth.User', $newUser['User']);
    }
}
